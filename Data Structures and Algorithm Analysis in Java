2017/10/13
引论
1.数学知识复习 
在计算机中，除非特别说明，否则所有对数都是以2为底；

1.1当一个函数用它自己来定义时就称为递归（recursive）；
关于递归容易被混淆的概念——
基本法则：
1.基准情形（base case）--必须总要有某些基准情形不用递归即可求解；
2.不断推进（making progress）--对于要求递归的，调用必须朝着基准情形推进；
3.设计法则（design rule）--假设所有的递归调用都能进行；
4.合成效益法则（compound interest rule）--在求解一个问题的同一实例时，切勿在不同的递归调用中做重复性的工作；

1.2实现泛型构件pre-Java5
f泛型机制（generic mechanism）--如果除去对象的基本类型外，实现方法时相同的，那么我们就可以用泛型实现来描述这种基本的功能。
例如编写一个方法，将由一些对象组成的数组排序方法要求逻辑关系与被排序的对象类型无关，此时就可以编写泛型方法；
Java中的基本思想就是通过Object这种超类来实现泛型类；
例如：
public class MemoryCell{
             private Object storedValue;
	public Object read(){
	return storedValue;
	}
	public void write(Object x){
             storedValue=x;
	}
}
使用这种策略要注意2个问题：Object与目标类型的类型转换以及不能使用基本类型（只有引用类型能与Object相容？？？）；
1.3使用接口类型表示泛型
 关于compareTo的使用：
 1.只有实现了Comparable接口的对象才能作为Comparable的数组元素传递（仅有compareTo方法是不行的）；
 2.如果Comparable数组有不同类型的对象，则会抛出异常；
 3.基本类型不能作为Comparable数组元素，但是包装类可以；
 4.有的类是无法实现该借口的，比如final类，但是function object（函数对象）可以使用接口解决；

1.4数组类型兼容性
1.5利用Java5泛型特性实现泛型构建
1.5.2自动装箱/拆箱
自动装箱：如果一个int类型变量传递到需要Integer对象的地方，那么，编译器会在幕后插入一个队Integer构造方法的调用；
自动拆箱：相反的环境，调用intValue方法；
1.5.3 菱形运算符，在 java7以后后已使用，简化泛型写法；
1.5.4带有限制的通配符
public static double totalArea(Collection<? extends Shape> arr)
1.5.5泛型static方法与类型限界
1.6函数对象
一个函数通过将其放在一个对象内部而被传递的此对象称为函数对象；所以函数对象只有方法没有数据；

练习：
1.选择问题--求解N个数中第k个最大者；
当k=N/2时，对于不同的N值显示其运行时间；
1,2,3,4,5,6,7,8,9,10
5,4,3,2,1   6,7,8,9, 10
